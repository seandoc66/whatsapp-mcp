{
  "name": "Historical Data Migration",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 2 * * *"
            }
          ]
        }
      },
      "id": "migration-trigger",
      "name": "Daily Migration Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Smart filtering: Read high-quality business conversations\nconst sqlite3 = require('sqlite3').verbose();\nconst dbPath = '/data/database/store/messages.db';\n\n// Create database connection\nconst db = new sqlite3.Database(dbPath);\n\n// Define chat exclusion patterns (personal/family chats)\nconst excludedChatPatterns = [\n  'Familia%', 'Family%', 'familia%',\n  '%Mamis%', '%mamis%',\n  'Welcome 2024-2025', // Group chat\n  'Gins Mamis'\n];\n\n// Build exclusion conditions\nconst excludeConditions = excludedChatPatterns.map(() => 'c.name NOT LIKE ?').join(' AND ');\n\n// Smart filtering query:\n// 1. Exclude obvious personal/family chats\n// 2. Remove standardized auto-responses\n// 3. Focus on business conversations with substance\n// 4. Preserve conversation context (include both sides)\nconst query = `\n  SELECT m.*, c.name as chat_name,\n         CASE WHEN c.name IN (\n           SELECT DISTINCT c2.name FROM chats c2 \n           JOIN messages m2 ON c2.jid = m2.chat_jid \n           WHERE m2.is_from_me = 1 \n           AND LENGTH(m2.content) > 50\n           GROUP BY c2.name \n           HAVING COUNT(*) >= 3\n         ) THEN 1 ELSE 0 END as is_business_chat\n  FROM messages m\n  LEFT JOIN chats c ON m.chat_jid = c.jid\n  WHERE m.content IS NOT NULL \n    AND m.content != ''\n    AND LENGTH(m.content) > 5\n    -- Exclude standardized auto-responses\n    AND m.content NOT LIKE '%Welcome English School%'\n    AND m.content NOT LIKE '%horario de atenciÃ³n%'\n    AND m.content NOT LIKE '%no podemos atenderte%'\n    AND m.content NOT LIKE '%Ahora no podemos atenderte%'\n    -- Exclude obvious personal chats\n    AND (${excludeConditions})\n    -- Focus on business conversations\n    AND c.name IN (\n      SELECT DISTINCT c3.name FROM chats c3 \n      JOIN messages m3 ON c3.jid = m3.chat_jid \n      WHERE m3.is_from_me = 1 \n      AND LENGTH(m3.content) > 50\n      AND m3.content NOT LIKE '%Welcome English School%'\n      GROUP BY c3.name \n      HAVING COUNT(*) >= 3\n    )\n    -- Skip already processed\n    AND m.id NOT IN (\n      SELECT message_id FROM processed_embeddings \n      WHERE processed_embeddings.message_id = m.id\n    )\n  ORDER BY c.name, m.timestamp ASC\n  LIMIT 100\n`;\n\n// Prepare parameters for exclusion patterns\nconst queryParams = excludedChatPatterns;\n\nreturn new Promise((resolve, reject) => {\n  db.all(query, queryParams, (err, rows) => {\n    if (err) {\n      console.error('Query error:', err);\n      db.close();\n      reject(err);\n      return;\n    }\n    \n    console.log(`Found ${rows.length} quality business messages to process`);\n    \n    // Group by conversations to preserve context\n    const conversationGroups = {};\n    \n    rows.forEach(row => {\n      const chatName = row.chat_name || 'Unknown';\n      if (!conversationGroups[chatName]) {\n        conversationGroups[chatName] = [];\n      }\n      conversationGroups[chatName].push(row);\n    });\n    \n    console.log(`Processing ${Object.keys(conversationGroups).length} business conversations`);\n    \n    // Transform each message preserving conversation context\n    const items = rows.map(row => ({\n      json: {\n        message_id: row.id,\n        chat_jid: row.chat_jid,\n        chat_name: row.chat_name || 'Unknown',\n        sender: row.sender,\n        content: row.content.trim(),\n        timestamp: row.timestamp,\n        is_from_me: Boolean(row.is_from_me),\n        is_business_response: Boolean(row.is_from_me),\n        is_business_chat: Boolean(row.is_business_chat),\n        content_length: row.content.length\n      }\n    }));\n    \n    db.close();\n    resolve(items);\n  });\n});"
      },
      "id": "read-messages",
      "name": "Read Quality Business Messages",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "anonymized_content",
              "name": "anonymized_content",
              "value": "={{ $json.content.replace(/\\b\\d{10,}\\b/g, '[PHONE]').replace(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g, '[EMAIL]').replace(/\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b/g, '[CARD]').replace(/\\b(?:IBAN|iban)\\s*:?\\s*[A-Z]{2}\\d{2}[A-Z0-9]{4}\\d{7}([A-Z0-9]?){0,16}\\b/g, '[IBAN]') }}",
              "type": "string"
            },
            {
              "id": "sender_anonymized",
              "name": "sender_anonymized",
              "value": "={{ $json.sender.includes('@') ? '[USER]' : $json.sender }}",
              "type": "string"
            },
            {
              "id": "conversation_context",
              "name": "conversation_context",
              "value": "={{ $json.chat_name + ' - ' + ($json.is_from_me ? 'Business' : 'Customer') + ' - ' + $json.timestamp }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "anonymize-data",
      "name": "Anonymize & Add Context",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [680, 300]
    },
    {
      "parameters": {
        "model": "sentence-transformers/all-mpnet-base-v2",
        "text": "={{ $json.anonymized_content }}",
        "options": {}
      },
      "id": "generate-embeddings",
      "name": "Generate Embeddings",
      "type": "@n8n/n8n-nodes-langchain.embeddingsHuggingFaceInference",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "language": "python",
        "jsCode": "# Store embeddings in ChromaDB\nimport chromadb\nimport json\nfrom datetime import datetime\n\n# Initialize ChromaDB client\nchroma_client = chromadb.PersistentClient(path=\"/data/database/chroma\")\ncollection = chroma_client.get_or_create_collection(name=\"conversation_embeddings\")\n\n# Process each item\nprocessed_count = 0\nfailed_count = 0\nresults = []\n\nfor item in items:\n    try:\n        data = item['json']\n        \n        # Get the embedding (should be from previous node)\n        embedding = data.get('embedding', [])\n        if not embedding:\n            print(f\"No embedding for message {data['message_id']}\")\n            failed_count += 1\n            continue\n            \n        # Prepare metadata with conversation context\n        metadata = {\n            'message_id': data['message_id'],\n            'chat_jid': data['chat_jid'],\n            'chat_name': data['chat_name'],\n            'sender': data['sender_anonymized'],\n            'timestamp': data['timestamp'],\n            'is_business_response': data['is_business_response'],\n            'is_business_chat': data['is_business_chat'],\n            'conversation_context': data['conversation_context'],\n            'content_length': data['content_length']\n        }\n        \n        # Add to ChromaDB\n        collection.add(\n            ids=[data['message_id']],\n            embeddings=[embedding],\n            documents=[data['anonymized_content']],\n            metadatas=[metadata]\n        )\n        \n        processed_count += 1\n        \n        # Prepare result for database tracking\n        results.append({\n            'json': {\n                'message_id': data['message_id'],\n                'processed_at': datetime.now().isoformat(),\n                'status': 'success'\n            }\n        })\n        \n    except Exception as e:\n        print(f\"Error processing message {data.get('message_id', 'unknown')}: {e}\")\n        failed_count += 1\n        results.append({\n            'json': {\n                'message_id': data.get('message_id', 'unknown'),\n                'processed_at': datetime.now().isoformat(),\n                'status': 'failed',\n                'error': str(e)\n            }\n        })\n\nprint(f\"Migration complete: {processed_count} processed, {failed_count} failed\")\n\n# Return summary\nreturn [{\n    'json': {\n        'migration_summary': {\n            'processed_count': processed_count,\n            'failed_count': failed_count,\n            'timestamp': datetime.now().isoformat()\n        },\n        'processed_messages': results\n    }\n}]"
      },
      "id": "store-embeddings",
      "name": "Store in ChromaDB",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Mark messages as processed in SQLite\nconst sqlite3 = require('sqlite3').verbose();\nconst dbPath = '/data/database/store/messages.db';\n\nconst db = new sqlite3.Database(dbPath);\n\n// Create processed_embeddings table if it doesn't exist\nconst createTableSQL = `\n  CREATE TABLE IF NOT EXISTS processed_embeddings (\n    message_id TEXT PRIMARY KEY,\n    processed_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status TEXT DEFAULT 'success'\n  )\n`;\n\ndb.run(createTableSQL);\n\n// Insert processed message IDs\nconst insertSQL = `INSERT OR REPLACE INTO processed_embeddings (message_id, processed_at, status) VALUES (?, ?, ?)`;\nconst summary = $json.migration_summary;\nconst processedMessages = $json.processed_messages;\n\nlet insertCount = 0;\n\nprocessedMessages.forEach(msg => {\n  db.run(insertSQL, [\n    msg.json.message_id,\n    msg.json.processed_at,\n    msg.json.status\n  ], (err) => {\n    if (!err) insertCount++;\n  });\n});\n\n// Wait a bit for all inserts to complete\nsetTimeout(() => {\n  db.close();\n  console.log(`Marked ${insertCount} messages as processed`);\n}, 1000);\n\n// Return summary for logging\nreturn {\n  json: {\n    migration_completed: true,\n    ...summary,\n    database_updated: true\n  }\n};"
      },
      "id": "mark-processed",
      "name": "Mark as Processed",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "url": "http://backend:3001/api/webhooks/migration-status",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "log-progress",
      "name": "Log Migration Progress",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "Daily Migration Trigger": {
      "main": [
        [
          {
            "node": "Read Quality Business Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Quality Business Messages": {
      "main": [
        [
          {
            "node": "Anonymize & Add Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anonymize & Add Context": {
      "main": [
        [
          {
            "node": "Generate Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Embeddings": {
      "main": [
        [
          {
            "node": "Store in ChromaDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store in ChromaDB": {
      "main": [
        [
          {
            "node": "Mark as Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark as Processed": {
      "main": [
        [
          {
            "node": "Log Migration Progress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCreatedBy": "n8n@1.0.0",
    "instanceId": "whatsapp-reply-assistant"
  },
  "id": "2",
  "tags": ["migration", "embeddings", "historical-data"]
}