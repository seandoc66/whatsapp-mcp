{
  "name": "System Health Monitor",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "*/5 * * * *"
            }
          ]
        }
      },
      "id": "health-check-trigger",
      "name": "Every 5 Minutes",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "http://backend:3001/health",
        "options": {
          "timeout": 5000
        }
      },
      "id": "check-backend",
      "name": "Check Backend API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [460, 200]
    },
    {
      "parameters": {
        "jsCode": "// Check SQLite database connectivity\nconst sqlite3 = require('sqlite3').verbose();\nconst fs = require('fs');\nconst dbPath = '/data/database/store/messages.db';\n\nlet healthStatus = {\n  sqlite_accessible: false,\n  sqlite_readable: false,\n  message_count: 0,\n  last_message_time: null,\n  error: null\n};\n\ntry {\n  // Check if database file exists\n  if (!fs.existsSync(dbPath)) {\n    throw new Error('SQLite database file not found');\n  }\n  \n  healthStatus.sqlite_accessible = true;\n  \n  // Test database connection and read\n  const db = new sqlite3.Database(dbPath);\n  \n  return new Promise((resolve, reject) => {\n    db.get(\"SELECT COUNT(*) as count, MAX(timestamp) as last_time FROM messages\", [], (err, row) => {\n      if (err) {\n        healthStatus.error = err.message;\n        db.close();\n        resolve({ json: healthStatus });\n        return;\n      }\n      \n      healthStatus.sqlite_readable = true;\n      healthStatus.message_count = row.count;\n      healthStatus.last_message_time = row.last_time;\n      \n      db.close();\n      resolve({ json: healthStatus });\n    });\n  });\n  \n} catch (error) {\n  healthStatus.error = error.message;\n  return { json: healthStatus };\n}"
      },
      "id": "check-sqlite",
      "name": "Check SQLite Database",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "language": "python",
        "jsCode": "# Check ChromaDB connectivity and collection status\nimport chromadb\nfrom datetime import datetime\n\nhealthStatus = {\n    'chromadb_accessible': False,\n    'collection_exists': False,\n    'embedding_count': 0,\n    'last_updated': None,\n    'error': None\n}\n\ntry:\n    # Initialize ChromaDB client\n    chroma_client = chromadb.PersistentClient(path=\"/data/database/chroma\")\n    healthStatus['chromadb_accessible'] = True\n    \n    # Check if collection exists\n    try:\n        collection = chroma_client.get_collection(name=\"conversation_embeddings\")\n        healthStatus['collection_exists'] = True\n        \n        # Get collection stats\n        count = collection.count()\n        healthStatus['embedding_count'] = count\n        \n        if count > 0:\n            # Try to query one record to verify functionality\n            results = collection.query(\n                query_texts=[\"test query\"],\n                n_results=1\n            )\n            if results and results['documents']:\n                healthStatus['last_updated'] = datetime.now().isoformat()\n                \n    except Exception as collection_error:\n        healthStatus['error'] = f\"Collection error: {collection_error}\"\n        \nexcept Exception as e:\n    healthStatus['error'] = str(e)\n\nprint(f\"ChromaDB Health: {healthStatus}\")\n\nreturn [{'json': healthStatus}]"
      },
      "id": "check-chromadb",
      "name": "Check ChromaDB",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 400]
    },
    {
      "parameters": {
        "model": "sentence-transformers/all-mpnet-base-v2",
        "options": {}
      },
      "id": "test-embeddings",
      "name": "Test Embedding Generation",
      "type": "@n8n/n8n-nodes-langchain.embeddingsHuggingFaceInference",
      "typeVersion": 1,
      "position": [460, 500]
    },
    {
      "parameters": {
        "jsCode": "// Aggregate all health check results\nconst backendHealth = $('Check Backend API').first().json;\nconst sqliteHealth = $('Check SQLite Database').first().json;\nconst chromadbHealth = $('Check ChromaDB').first().json;\nconst embeddingTest = $('Test Embedding Generation').first().json;\n\nconst timestamp = new Date().toISOString();\n\n// Determine overall system health\nlet overallStatus = 'healthy';\nlet criticalErrors = [];\nlet warnings = [];\n\n// Check backend\nif (!backendHealth || backendHealth.error) {\n  overallStatus = 'critical';\n  criticalErrors.push('Backend API unreachable');\n}\n\n// Check SQLite\nif (!sqliteHealth.sqlite_accessible || !sqliteHealth.sqlite_readable) {\n  overallStatus = 'critical';\n  criticalErrors.push('SQLite database inaccessible');\n} else if (sqliteHealth.message_count === 0) {\n  warnings.push('No messages in database');\n}\n\n// Check ChromaDB\nif (!chromadbHealth.chromadb_accessible) {\n  overallStatus = 'critical';\n  criticalErrors.push('ChromaDB inaccessible');\n} else if (!chromadbHealth.collection_exists) {\n  warnings.push('ChromaDB collection not initialized');\n} else if (chromadbHealth.embedding_count === 0) {\n  warnings.push('No embeddings in ChromaDB');\n}\n\n// Check embedding generation\nif (!embeddingTest || embeddingTest.error) {\n  if (overallStatus !== 'critical') {\n    overallStatus = 'degraded';\n  }\n  warnings.push('Embedding generation failed');\n}\n\n// Set final status\nif (warnings.length > 0 && overallStatus === 'healthy') {\n  overallStatus = 'warning';\n}\n\nconst healthReport = {\n  timestamp: timestamp,\n  overall_status: overallStatus,\n  critical_errors: criticalErrors,\n  warnings: warnings,\n  components: {\n    backend_api: {\n      status: backendHealth ? 'up' : 'down',\n      details: backendHealth\n    },\n    sqlite_database: {\n      status: sqliteHealth.sqlite_readable ? 'up' : 'down',\n      message_count: sqliteHealth.message_count,\n      last_message: sqliteHealth.last_message_time,\n      error: sqliteHealth.error\n    },\n    chromadb: {\n      status: chromadbHealth.chromadb_accessible ? 'up' : 'down',\n      collection_exists: chromadbHealth.collection_exists,\n      embedding_count: chromadbHealth.embedding_count,\n      error: chromadbHealth.error\n    },\n    embedding_service: {\n      status: embeddingTest && !embeddingTest.error ? 'up' : 'down',\n      details: embeddingTest\n    }\n  }\n};\n\nconsole.log(`Health Check Complete: ${overallStatus}`);\n\nreturn {\n  json: healthReport\n};"
      },
      "id": "aggregate-health",
      "name": "Aggregate Health Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 350]
    },
    {
      "parameters": {
        "url": "http://backend:3001/api/webhooks/health-report",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "log-health-status",
      "name": "Log Health Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 350]
    },
    {
      "parameters": {
        "conditions": {\n          \"options\": {\n            \"caseSensitive\": true,\n            \"leftValue\": \"\",\n            \"typeValidation\": \"strict\"\n          },\n          \"conditions\": [\n            {\n              \"id\": \"condition1\",\n              \"leftValue\": \"={{ $json.overall_status }}\",\n              \"rightValue\": \"critical\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              }\n            }\n          ],\n          \"combinator\": \"and\"\n        },\n        \"options\": {}\n      },\n      \"id\": \"check-critical\",\n      \"name\": \"Critical Issues?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 2,\n      \"position\": [1120, 350]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"http://backend:3001/api/alerts/critical\",\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        },\n        \"sendBody\": true,\n        \"jsonBody\": \"={{ JSON.stringify({alert_type: 'critical_system_failure', details: $json, timestamp: $json.timestamp}) }}\",\n        \"options\": {}\n      },\n      \"id\": \"send-alert\",\n      \"name\": \"Send Critical Alert\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4,\n      \"position\": [1340, 300]\n    }\n  ],\n  \"connections\": {\n    \"Every 5 Minutes\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Backend API\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Check SQLite Database\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Check ChromaDB\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Test Embedding Generation\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Backend API\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate Health Status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check SQLite Database\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate Health Status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check ChromaDB\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate Health Status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Test Embedding Generation\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate Health Status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate Health Status\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Log Health Status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Log Health Status\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Critical Issues?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Critical Issues?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Critical Alert\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        []\n      ]\n    }\n  },\n  \"active\": true,\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"1\",\n  \"meta\": {\n    \"templateCreatedBy\": \"n8n@1.0.0\",\n    \"instanceId\": \"whatsapp-reply-assistant\"\n  },\n  \"id\": \"3\",\n  \"tags\": [\"monitoring\", \"health\", \"alerts\"]\n}"